
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <ctime>
#include <cassert>
#include <cstring>
#include <algorithm>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <unordered_map>
#include <unordered_set>
#include <memory.h>
using namespace std;

const int mod = 1000000007;
int nu[1024], s[1024];
int cmb[1024][1024];

int pow2(int p)
{
    int r = 1;
    int b = 2;
    while (p)
    {
        if (p & 1)
        {
            r = (1ll*r*b) % mod;
        }
        b = (1ll*b*b) % mod;
        p >>= 1;
    }
    return r;
}

int main()
{
    cmb[0][0] = 1;
    for (int i = 1; i <= 1000; i++)
    {
        cmb[i][0] = 1;
        for (int j = 1; j <= i; j++)
        {
            cmb[i][j] = cmb[i-1][j-1] + cmb[i-1][j];
            if (cmb[i][j] >= mod)
            {
                cmb[i][j] -= mod;
            }
        }
    }

    for (int n = 0; n <= 1000; n++)
    {
        nu[n] = pow2(n*(n-1));

        for (int t = 1; t < n; t++)
        {
            long long tmp = (1ll*pow2((n-1)*(n-t))*nu[t]) % mod;
            tmp = (tmp*cmb[n][t]) % mod;
            nu[n] -= tmp;
            if (nu[n] < 0)
            {
                nu[n] += mod;
            }
        }
    }

    for (int n = 0; n <= 1000; n++)
    {
        s[n] = nu[n];
        for (int t = 1; t < n; t++)
        {
            long long tmp = (1ll*cmb[n-1][t-1]*s[t])%mod;
            tmp = (tmp*nu[n-t])%mod;
            s[n] += tmp;
            if (s[n] >= mod)
            {
                s[n] -= mod;
            }
        }
    }

    int tc;
    scanf("%d", &tc);
    while (tc--)
    {
        int n;
        scanf("%d", &n);
        printf("%d\n", s[n]);
    }

    return 0;
}
